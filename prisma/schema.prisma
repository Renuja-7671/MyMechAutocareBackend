generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// USERS & AUTHENTICATION
// ============================================

model User {
  id           Int       @id @default(autoincrement())
  email        String    @unique
  passwordHash String    @map("password_hash")
  role         Role
  isActive     Boolean   @default(true) @map("is_active")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  
  customer      Customer?
  employee      Employee?
  sentMessages  Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  notifications Notification[]
  auditLogs     AuditLog[]
  
  @@map("users")
}

model Customer {
  id          Int       @id @default(autoincrement())
  userId      Int       @unique @map("user_id")
  firstName   String    @map("first_name")
  lastName    String    @map("last_name")
  phone       String?
  address     String?
  city        String?
  postalCode  String?   @map("postal_code")
  dateOfBirth DateTime? @map("date_of_birth") @db.Date
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  vehicles     Vehicle[]
  appointments Appointment[]
  projects     Project[]
  feedback     Feedback[]
  
  @@map("customers")
}

model Employee {
  id          Int       @id @default(autoincrement())
  userId      Int       @unique @map("user_id")
  firstName   String    @map("first_name")
  lastName    String    @map("last_name")
  phone       String?
  department  String?
  position    String?
  hireDate    DateTime  @map("hire_date") @db.Date
  hourlyRate  Decimal?  @map("hourly_rate") @db.Decimal(10, 2)
  isAvailable Boolean   @default(true) @map("is_available")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  serviceLogs ServiceLog[]
  projectLogs ProjectLog[]
  
  @@map("employees")
}

// ============================================
// VEHICLES
// ============================================

model Vehicle {
  id          Int      @id @default(autoincrement())
  customerId  Int      @map("customer_id")
  make        String
  model       String
  year        Int
  vin         String?  @unique
  licensePlate String? @map("license_plate")
  color       String?
  mileage     Int?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  customer     Customer      @relation(fields: [customerId], references: [id], onDelete: Cascade)
  appointments Appointment[]
  projects     Project[]
  
  @@map("vehicles")
}

// ============================================
// SERVICE CATALOG
// ============================================

model Service {
  id                Int      @id @default(autoincrement())
  name              String
  description       String?
  category          String?
  estimatedDuration Int?     @map("estimated_duration")
  basePrice         Decimal? @map("base_price") @db.Decimal(10, 2)
  isActive          Boolean  @default(true) @map("is_active")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  
  appointments Appointment[]
  
  @@map("services")
}

// ============================================
// APPOINTMENTS
// ============================================

model Appointment {
  id            Int      @id @default(autoincrement())
  customerId    Int      @map("customer_id")
  vehicleId     Int      @map("vehicle_id")
  serviceId     Int?     @map("service_id")
  scheduledDate DateTime @map("scheduled_date")
  status        AppointmentStatus @default(scheduled)
  notes         String?
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  
  customer     Customer     @relation(fields: [customerId], references: [id], onDelete: Cascade)
  vehicle      Vehicle      @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  service      Service?     @relation(fields: [serviceId], references: [id])
  serviceLogs  ServiceLog[]
  feedback     Feedback[]
  
  @@map("appointments")
}

// ============================================
// PROJECTS (Custom Modifications)
// ============================================

model Project {
  id            Int      @id @default(autoincrement())
  customerId    Int      @map("customer_id")
  vehicleId     Int      @map("vehicle_id")
  title         String
  description   String
  projectType   String?  @map("project_type")
  status        ProjectStatus @default(pending)
  priority      Priority @default(medium)
  estimatedCost Decimal? @map("estimated_cost") @db.Decimal(10, 2)
  actualCost    Decimal? @map("actual_cost") @db.Decimal(10, 2)
  startDate     DateTime? @map("start_date") @db.Date
  endDate       DateTime? @map("end_date") @db.Date
  approvedBy    Int?     @map("approved_by")
  approvedAt    DateTime? @map("approved_at")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  
  customer    Customer     @relation(fields: [customerId], references: [id], onDelete: Cascade)
  vehicle     Vehicle      @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  projectLogs ProjectLog[]
  feedback    Feedback[]
  
  @@map("projects")
}

// ============================================
// SERVICE LOGS (Time tracking)
// ============================================

model ServiceLog {
  id                 Int      @id @default(autoincrement())
  appointmentId      Int      @map("appointment_id")
  employeeId         Int      @map("employee_id")
  startTime          DateTime @map("start_time")
  endTime            DateTime? @map("end_time")
  hoursWorked        Decimal? @map("hours_worked") @db.Decimal(5, 2)
  progressPercentage Int      @default(0) @map("progress_percentage")
  status             ServiceStatus @default(in_progress)
  notes              String?
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")
  
  appointment  Appointment   @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  employee     Employee      @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  serviceParts ServicePart[]
  
  @@map("service_logs")
}

// ============================================
// PROJECT LOGS (Time tracking)
// ============================================

model ProjectLog {
  id          Int      @id @default(autoincrement())
  projectId   Int      @map("project_id")
  employeeId  Int      @map("employee_id")
  logDate     DateTime @map("log_date") @db.Date
  hoursLogged Decimal  @map("hours_logged") @db.Decimal(5, 2)
  description String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  project      Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  employee     Employee      @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  serviceParts ServicePart[]
  
  @@map("project_logs")
}

// ============================================
// PARTS INVENTORY
// ============================================

model Part {
  id              Int      @id @default(autoincrement())
  name            String
  partNumber      String?  @unique @map("part_number")
  description     String?
  category        String?
  quantityInStock Int      @default(0) @map("quantity_in_stock")
  unitPrice       Decimal? @map("unit_price") @db.Decimal(10, 2)
  reorderLevel    Int      @default(10) @map("reorder_level")
  supplier        String?
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  
  serviceParts ServicePart[]
  
  @@map("parts")
}

// ============================================
// SERVICE PARTS (Parts used)
// ============================================

model ServicePart {
  id           Int  @id @default(autoincrement())
  serviceLogId Int? @map("service_log_id")
  projectLogId Int? @map("project_log_id")
  partId       Int  @map("part_id")
  quantityUsed Int  @map("quantity_used")
  createdAt    DateTime @default(now()) @map("created_at")
  
  serviceLog ServiceLog? @relation(fields: [serviceLogId], references: [id], onDelete: Cascade)
  projectLog ProjectLog? @relation(fields: [projectLogId], references: [id], onDelete: Cascade)
  part       Part        @relation(fields: [partId], references: [id])
  
  @@map("service_parts")
}

// ============================================
// FEEDBACK & REVIEWS
// ============================================

model Feedback {
  id            Int      @id @default(autoincrement())
  customerId    Int      @map("customer_id")
  appointmentId Int?     @map("appointment_id")
  projectId     Int?     @map("project_id")
  rating        Int?
  comment       String?
  createdAt     DateTime @default(now()) @map("created_at")
  
  customer    Customer     @relation(fields: [customerId], references: [id], onDelete: Cascade)
  appointment Appointment? @relation(fields: [appointmentId], references: [id], onDelete: SetNull)
  project     Project?     @relation(fields: [projectId], references: [id], onDelete: SetNull)
  
  @@map("feedback")
}

// ============================================
// NOTIFICATIONS
// ============================================

model Notification {
  id                Int      @id @default(autoincrement())
  userId            Int      @map("user_id")
  title             String
  message           String
  type              String
  isRead            Boolean  @default(false) @map("is_read")
  relatedEntityType String?  @map("related_entity_type")
  relatedEntityId   Int?     @map("related_entity_id")
  createdAt         DateTime @default(now()) @map("created_at")
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("notifications")
}

// ============================================
// MESSAGES
// ============================================

model Message {
  id                Int      @id @default(autoincrement())
  senderId          Int      @map("sender_id")
  receiverId        Int      @map("receiver_id")
  relatedEntityType String?  @map("related_entity_type")
  relatedEntityId   Int?     @map("related_entity_id")
  message           String
  isRead            Boolean  @default(false) @map("is_read")
  createdAt         DateTime @default(now()) @map("created_at")
  
  sender   User @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  
  @@map("messages")
}

// ============================================
// AUDIT LOG
// ============================================

model AuditLog {
  id         Int      @id @default(autoincrement())
  userId     Int?     @map("user_id")
  action     String
  entityType String   @map("entity_type")
  entityId   Int?     @map("entity_id")
  changes    Json?
  ipAddress  String?  @map("ip_address")
  createdAt  DateTime @default(now()) @map("created_at")
  
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@map("audit_logs")
}

// ============================================
// ENUMS
// ============================================

enum Role {
  customer
  employee
  admin
}

enum AppointmentStatus {
  scheduled
  confirmed
  in_progress
  completed
  cancelled
}

enum ProjectStatus {
  pending
  approved
  in_progress
  completed
  cancelled
}

enum Priority {
  low
  medium
  high
  urgent
}

enum ServiceStatus {
  not_started
  in_progress
  completed
  on_hold
}